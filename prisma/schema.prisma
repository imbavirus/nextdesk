// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model System {
  id        String      @id
  cpu       String?
  hostname  String?
  memory    String?
  os        String?
  platform  String?
  userId    Int?
  uuid      String?
  version   String?
  lastSeen  DateTime    @default(now())
  Tokens    UserToken[]
  User      User?       @relation(fields: [userId], references: [id])
  Peers     Peer[]
  AuthCodes AuthCode[]
}

model User {
  id         Int         @id @default(autoincrement())
  guid       String?
  name       String
  password   String
  email      String
  note       String?
  status     Int
  isAdmin    Boolean
  provider   String   @default("jwt")
  Tokens     UserToken[]
  Peers      Peer[]      @relation("UserPeers")
  OwnedPeers Peer[]      @relation("UserOwnedPeers")
  Systems    System[]
  PeerTags   PeerTag[]
  AuthCodes  AuthCode[]
  @@unique([email, provider]) // Composite unique constraint
}

model UserToken {
  id       Int     @id @default(autoincrement())
  userId   Int
  systemId String
  token    String
  provider String
  isActive Boolean

  system System @relation(fields: [systemId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Tag {
  id       Int       @id @default(autoincrement())
  userId   Int
  tag      String
  color    BigInt
  isActive Boolean
  Peers    Peer[]    @relation("PeerTags")
  PeerTags PeerTag[]
  @@unique([tag, userId]) // Composite unique constraint
}

model Peer {
  id       Int       @id @default(autoincrement())
  userId   Int?
  ownerId  Int
  systemId String
  alias    String?
  hash     String?
  isActive Boolean
  User     User?      @relation("UserPeers", fields: [userId], references: [id])
  Owner    User      @relation("UserOwnedPeers", fields: [ownerId], references: [id])
  System   System    @relation(fields: [systemId], references: [id])
  Tags     Tag[]     @relation("PeerTags")
  PeerTags PeerTag[]
  @@unique([systemId, ownerId]) // Composite unique constraint
}

model PeerTag {
  peerId   Int
  tagId    Int
  ownerId  Int
  isActive Boolean

  Peer    Peer  @relation(fields: [peerId], references: [id])
  Tag     Tag   @relation(fields: [tagId], references: [id])
  Owner   User  @relation(fields: [ownerId], references: [id])

  @@id([peerId, tagId, ownerId])
}

model AuthCode {
  id          String       @id
  systemId    String
  accessToken String?
  userId      Int?
  isActive    Boolean
  System      System    @relation(fields: [systemId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
}
